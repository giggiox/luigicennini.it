[{"content":"\u003ch1 id=\"introduction\"\u003eIntroduction\u003c/h1\u003e\n\u003cp\u003eThe aim of this project is to develop a cheaper alternative to the telemetry systems available on the market for mountain bikes.\u003c/p\u003e\n\u003cp\u003eTelemetry systems for mountain bikes monitor and acquire data on the position of the bike\u0026rsquo;s fork and shock absorber while riding. This data is crucial for off-road sports enthusiasts and professional athletes, as it provides valuable information for analysing and improving performance.\u003c/p\u003e\n\u003cp\u003eCurrently, many telemetry systems, such as \u003ca href=\"https://www.bybtech.it/\"\u003ebyb telemetry\u003c/a\u003e, use expensive linear potentiometers to accurately measure the position of the fork and shock absorber.\u003c/p\u003e\n\u003cp\u003eOther users on the internet have tried other ways to get a good result, for example a \u003ca href=\"https://www.vitalmtb.com/forums/The-Hub,2/DIY-mtb-telemetry-data,11126\"\u003eLiDar sensor\u003c/a\u003e, but the results were not too encouraging as they were too noisy.\u003c/p\u003e\n\u003cp\u003eTherefore, after careful evaluation, I have concluded that using a rotary encoder is a more cost-effective alternative.\u003c/p\u003e\n\u003cp\u003eThe main reason for this choice is that rotary encoders are less expensive than linear potentiometers and still offer good position measurement accuracy. In addition, rotary encoders are generally more robust and less prone to damage than linear encoders, which can be more fragile and susceptible to failure in off-road environments.\u003c/p\u003e\n\u003ch3 id=\"how-a-rotative-encoder-works\"\u003ehow a rotative encoder works\u003c/h3\u003e\n\u003cp\u003eEncoders can sense movement in either direction, detecting holes or marks as they move through 2 positions. When the blue disc in the diagram below rotates clockwise, changes are first detected by pin 1 and then pin 2. When it rotates counterclockwise, pin 2 is the first to detect changes. This scheme is called \u0026lsquo;quadrature coding\u0026rsquo; because the waveforms detected by the 2 pins are offset by 90 degrees.\u003c/p\u003e\n\r\n \r\n\u003ccenter\u003e\r\n\u003ctable class=\"d-flex justify-content-center\"\u003e\r\n\t\u003ctr\u003e\r\n\t\t\u003ctd style=\"background: none !important; border: none !important\"\u003e\r\n\t\t\t\u003cimg src=\"/projects/forktelemetry/td_libs_Encoder_pos1.png\" id=\"quad\"\u003e\r\n\t\t\u003c/td\u003e\r\n\t\u003c/tr\u003e\r\n\t\u003ctr\u003e\r\n\t\t\u003ctd align=\"center\" style=\"background: none !important; border: none !important\"\u003e\r\n\t\t\t\u003cform action=\"#\"\u003e\r\n\t\t\t\t\u003cinput type=\"submit\" value=\"\u003c- counterclockwise\" onClick=\"rotate(-1); return false\"\u003e\r\n\t\t\t\t\u003cinput type=\"text\" value=\"0\" id=\"accum\" size=6\u003e\r\n\t\t\t\t\u003cinput type=\"submit\" value=\"clockwise -\u003e\" onClick=\"rotate(1); return false\"\u003e\r\n\t\t\t\u003c/form\u003e\r\n\t\t\u003c/td\u003e\r\n\t\u003c/tr\u003e\r\n\u003c/table\u003e\r\n\u003c/center\u003e\r\n\u003cscript\u003e\r\nvar img = new Array();\r\nimg[0] = new Image();\r\nimg[1] = new Image();\r\nimg[2] = new Image();\r\nimg[3] = new Image();\r\nimg[0].src = \"/projects/forktelemetry/td_libs_Encoder_pos1.png\";\r\nimg[1].src = \"/projects/forktelemetry/td_libs_Encoder_pos2.png\";\r\nimg[2].src = \"/projects/forktelemetry/td_libs_Encoder_pos3.png\";\r\nimg[3].src = \"/projects/forktelemetry/td_libs_Encoder_pos4.png\";\r\nvar position = 0;\r\nfunction rotate(n) {\r\nval = Number(document.getElementById('accum').value) + n;\r\nif (isNaN(val)) val = 0;\r\ndocument.getElementById('accum').value = val;\r\nposition += n;\r\nif (position \u003e 3) position = 0;\r\nif (position \u003c 0) position = 3;\r\ndocument.getElementById('quad').src = img[position].src;\r\n}\r\n\u003c/script\u003e\r\n\n\u003cp\u003e(animation taken from \u003ca href=\"https://www.pjrc.com/teensy/td_libs_Encoder.html\"\u003equesto sito\u003c/a\u003e)\u003c/p\u003e\n\u003ch1 id=\"pre---prototyping\"\u003epre - prototyping\u003c/h1\u003e\n\u003cp\u003eBefore proceeding with the prototyping of the fork sensor, I carried out a feasibility analysis to assess the feasibility of this project.\u003c/p\u003e\n\u003cp\u003eAs a starting point, I selected a reliable rotary encoder: the LPD3806. This type of encoder offers a resolution of 600 PPR (pulses per revolution). Using a pulley with a diameter of 9.4 mm, a density of approximately 30 detections per millimetre of fork movement is achieved. This is because the encoder generates a quadrature signal that can be read on both the rising and falling edges. By exploiting both edges, we obtain a quadrupled resolution of the encoder, i.e. 24000 PPR (600 PPR * 4).\u003c/p\u003e\n\u003cp\u003eCalculating the number of possible observations per millimetre of fork movement, we obtain the following result:\u003c/p\u003e\n\u003cp\u003e$$ \\frac{600 * 4}{\\pi* 9.4} \\approx 30 $$\u003c/p\u003e\n\u003cp\u003eFor example, considering a 150 mm travel fork, there will be approximately 12190 detections (this value will be used in the code).\u003c/p\u003e\n\u003cp\u003eIt is important to note that increasing the diameter of the pulley coupled to the encoder reduces the density of detections per millimetre of movement. Furthermore, the maximum response speed of the encoder must be taken into account, which determines the maximum linear speed that the fork can reach. In the case of the LPD3806, the maximum speed is:\u003c/p\u003e\n\u003cp\u003eâ€‹$$ 2000 RPM = 2000/60 RPS = $$\n$$ 2000* (\\pi*9.4) /60 \\frac{mm}{s} \\approx 983 \\frac{mm}{s} $$\u003c/p\u003e\n\u003cp\u003eUsing a pulley with a smaller diameter will result in a lower maximum detectable linear speed.\u003c/p\u003e\n\u003cp\u003eWith this initial information, I therefore started the prototyping process.\u003c/p\u003e\n\u003ch1 id=\"prototyping\"\u003eprototyping\u003c/h1\u003e\n\u003cp\u003eFor the prototyping of the fork sensor, I used the \u003ca href=\"https://www.autodesk.it/products/fusion-360/overview\"\u003efusion 360\u003c/a\u003e software. After several iterations, I arrived at the following result:\u003c/p\u003e\n\r\n \r\n\u003ccenter\u003e\r\n\u003cimg src=\"/projects/forktelemetry/forkSensor.jpg\"  width=\"80%\" \u003e\r\n\u003c/center\u003e\r\n\n\r\n \r\n\u003cscript type=\"module\" src=\"/model-viewer.min.js\"\u003e\u003c/script\u003e\r\n\u003ccenter\u003e\r\n\u003cmodel-viewer style=\"width: 80; height: 80vh\" src=\"/projects/forktelemetry/forksensor3d.glb\" ar ar-modes=\"webxr scene-viewer quick-look\" camera-controls poster=\"/projects/forktelemetry/forkSensor3dPoster.webp\" shadow-intensity=\"1\" autoplay camera-orbit=\"-38.89deg 61.4deg 644.1m\" field-of-view=\"30deg\"\u003e\r\n    \u003cdiv class=\"progress-bar hide\" slot=\"progress-bar\"\u003e\r\n        \u003cdiv class=\"update-bar\"\u003e\u003c/div\u003e\r\n    \u003c/div\u003e\r\n\u003c/model-viewer\u003e\r\n\u003c/center\u003e\r\n\n\u003cp\u003eThe fusion360 file is available on GitHub at \u003ca href=\"https://github.com/giggiox/fork-telemetry/tree/main/fusio360files/v1\"\u003ethis link\u003c/a\u003e.\nUsing \u003ca href=\"https://www.blender.org/\"\u003eblender\u003c/a\u003e we can also show a concept of how it works once mounted on a fork.\u003c/p\u003e\n\r\n \r\n\u003ccenter\u003e\r\n\u003cmodel-viewer style=\"width: 80; height: 80vh\" src=\"/projects/forktelemetry/forksensorAnimation.glb\" ar ar-modes=\"webxr scene-viewer quick-look\" camera-controls poster=\"/projects/forktelemetry/forkSensorAnimationPoster.webp\" shadow-intensity=\"1\" autoplay camera-orbit=\"-216.6deg 65.99deg 1356m\" field-of-view=\"30deg\"\u003e\r\n    \u003cdiv class=\"progress-bar hide\" slot=\"progress-bar\"\u003e\r\n        \u003cdiv class=\"update-bar\"\u003e\u003c/div\u003e\r\n    \u003c/div\u003e\r\n\u003c/model-viewer\u003e\r\n\u003c/center\u003e\r\n\n\u003cp\u003eFor the design, I was inspired by the movement of the axes of a 3D printer and integrated a belt tensioning mechanism, typical of this type of printer.\u003c/p\u003e\n\u003cp\u003eSubsequently, I used the Arduino Nano to create a working Proof of Concept (POC). Overall, the system consists of 2 switches, 1 SD module, 1 Arduino Nano, 1 9-volt battery and the LPD3806 encoder.\nWhere:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003ea switch is used to turn the system on\u003c/li\u003e\n\u003cli\u003eThe other switch enables the writing of the encoder position with the chosen encoding ([encoder_position,]) to the SD card. This switch must be activated before the start of the descent and switched off immediately afterwards.\u003c/li\u003e\n\u003c/ul\u003e\n\r\n \r\n\u003ccenter\u003e\r\n\u003cimg src=\"/projects/forktelemetry/forktelemetry-schematics.png\"  width=\"60%\" \u003e\r\n\u003c/center\u003e\r\n\n\u003cp\u003eAt this point, I also designed a capture box using Fusion 360.\n\r\n \r\n\u003ccenter\u003e\r\n\u003cimg src=\"/projects/forktelemetry/openbox_fusion.PNG\"  width=\"80%\" \u003e\r\n\u003c/center\u003e\r\n\nThe box, which is designed so that it can be fixed with 2 clamps to the top tube of the bike, contains all components (except the encoder) and makes the 2 switches accessible from the outside.\n\r\n \r\n\u003ccenter\u003e\r\n\u003cimg src=\"/projects/forktelemetry/box_fusion.PNG\"  width=\"80%\" \u003e\r\n\u003c/center\u003e\r\n\u003c/p\u003e\n\u003ch1 id=\"stampa-e-codice\"\u003estampa e codice\u003c/h1\u003e\n\u003cp\u003eOnce printed (and assembled) the sensor and acquisition box by soldering the components on a millefori\u003c/p\u003e\n\r\n \r\n\u003ccenter\u003e\r\n\u003cimg src=\"/projects/forktelemetry/collage.png\"  width=\"80%\" \u003e\r\n\u003c/center\u003e\r\n\n\u003cp\u003ethe whole thing looks like this:\u003c/p\u003e\n\r\n \r\n\u003ccenter\u003e\r\n\u003cimg src=\"/projects/forktelemetry/laydown.jpg\"  width=\"80%\" \u003e\r\n\u003c/center\u003e\r\n\n\u003cp\u003eOperation once mounted on the MTB is as follows:\u003c/p\u003e\n\r\n \r\n\u003ccenter\u003e\r\n\u003cvideo width=35% controls\u003e\r\n    \u003csource src=\"/projects/forktelemetry/video.mp4\" type=\"video/mp4\" \u003e\r\n    Your browser does not support the video tag.  \r\n\u003c/video\u003e\r\n\u003c/center\u003e\r\n\n\u003cp\u003eThe code instead is as follows.\nNote that the port manipulation technique was used to obtain a maximum speed in reading the encoder.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-cpp\" data-lang=\"cpp\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#include\u003c/span\u003e \u003cspan style=\"color:#75715e\"\u003e\u0026lt;SPI.h\u0026gt;\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#include\u003c/span\u003e \u003cspan style=\"color:#75715e\"\u003e\u0026lt;SD.h\u0026gt;\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#include\u003c/span\u003e \u003cspan style=\"color:#75715e\"\u003e\u0026lt;String.h\u0026gt;\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#define encoderPinA 3\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#define encoderPinB 2\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#define buttonPin 7\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#define SD_PIN 10\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eFile logFile;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003ebool\u003c/span\u003e enableWriteToSD\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003efalse;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e newDirectoryName\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e newFileName\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003ebool\u003c/span\u003e startRecord;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003evolatile\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003elong\u003c/span\u003e encoderPosition\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003evolatile\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003ebool\u003c/span\u003e aStatePrev,bStatePrev,aState,bState;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003evoid\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003esetup\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  Serial.begin(\u003cspan style=\"color:#ae81ff\"\u003e9600\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#75715e\"\u003e//setup rotary encoder\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e  DDRD \u003cspan style=\"color:#f92672\"\u003e\u0026amp;=\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e~\u003c/span\u003e((\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e encoderPinA) \u003cspan style=\"color:#f92672\"\u003e|\u003c/span\u003e (\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e encoderPinB));\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#75715e\"\u003e// Abilita i pull-up interni\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e  PORTD \u003cspan style=\"color:#f92672\"\u003e|=\u003c/span\u003e (\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e encoderPinA) \u003cspan style=\"color:#f92672\"\u003e|\u003c/span\u003e (\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e encoderPinB);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  attachInterrupt(digitalPinToInterrupt(encoderPinA),handleEncoderInterrupt,CHANGE);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  attachInterrupt(digitalPinToInterrupt(encoderPinB),handleEncoderInterrupt,CHANGE);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#75715e\"\u003e//setup SD\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e  \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e(\u003cspan style=\"color:#f92672\"\u003e!\u003c/span\u003eSD.begin(SD_PIN)){ \u003cspan style=\"color:#66d9ef\"\u003ewhile\u003c/span\u003e(true); }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#66d9ef\"\u003ewhile\u003c/span\u003e(SD.exists(String(newDirectoryName))){ newDirectoryName\u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003e; }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (SD.mkdir(String(newDirectoryName))){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    Serial.print(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Created new directory: \u0026#34;\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    Serial.println(newDirectoryName);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#75715e\"\u003e//setup record button\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e  DDRD \u003cspan style=\"color:#f92672\"\u003e\u0026amp;=\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e~\u003c/span\u003e(\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e buttonPin);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  PORTD \u003cspan style=\"color:#f92672\"\u003e|=\u003c/span\u003e (\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e buttonPin);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  Serial.println(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;setup completed\u0026#34;\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003evoid\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eloop\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  startRecord\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003ePIND\u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003e(\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026lt;\u003c/span\u003ebuttonPin);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e(startRecord \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e!\u003c/span\u003eenableWriteToSD){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    logFile \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e SD.open(String(newDirectoryName) \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;/\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e  String(newFileName\u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003e) \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;.txt\u0026#34;\u003c/span\u003e, FILE_WRITE);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (logFile) { Serial.println(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Writing to \u0026#34;\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e String(newFileName\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e)); }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    enableWriteToSD\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003etrue;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#66d9ef\"\u003eelse\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e(startRecord \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e enableWriteToSD) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e     logFile.print(String(encoderPosition)\u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;,\u0026#34;\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#66d9ef\"\u003eelse\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e(\u003cspan style=\"color:#f92672\"\u003e!\u003c/span\u003estartRecord \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e enableWriteToSD){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    enableWriteToSD\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003efalse;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    logFile.close();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003evoid\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ehandleEncoderInterrupt\u003c/span\u003e(){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#75715e\"\u003e// Leggi lo stato corrente dei segnali A e B\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e  aState \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e PIND \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003e (\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e encoderPinA);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  bState \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e PIND \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003e (\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e encoderPinB);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#75715e\"\u003e// Verifica se il fronte di salita Ã¨ avvenuto sul segnale A\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e  \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (aState \u003cspan style=\"color:#f92672\"\u003e!=\u003c/span\u003e aStatePrev) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    aStatePrev \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e aState;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e// Verifica il cambiamento di direzione dell\u0026#39;encoder\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e    \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (aStatePrev \u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003e bStatePrev) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      encoderPosition\u003cspan style=\"color:#f92672\"\u003e--\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    } \u003cspan style=\"color:#66d9ef\"\u003eelse\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      encoderPosition\u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#75715e\"\u003e// Memorizza lo stato corrente dei segnali A e B per il prossimo interrupt\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e  bStatePrev \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e bState;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch1 id=\"first-tests-and-results\"\u003efirst tests and results\u003c/h1\u003e\n\u003cp\u003eWhen the switch is activated, the code starts recording the encoder position and saves it in a log file in its folder. The log file contains the encoder position values separated by commas.\u003c/p\u003e\n\u003cp\u003eI have created a website in javascript that uses the \u003ca href=\"https://plotly.com/javascript/\"\u003ePlotly JS\u003c/a\u003e library to display this data (\u003ca href=\"https://github.com/giggiox/fork-telemetry/tree/main/web\"\u003eGitHub link to site code\u003c/a\u003e). For example, the video I showed earlier produces a log file that can be opened in the site and generates this output:\u003c/p\u003e\n\r\n \r\n\u003ccenter\u003e\r\n\u003cimg src=\"/projects/forktelemetry/plot.png\"  width=\"80%\" \u003e\r\n\u003c/center\u003e\r\n\n\u003cp\u003eThe scatter plot shows the sampling number on the abscissas and the fork compression in millimetres on the ordinates.\u003c/p\u003e\n\u003cp\u003eBelow the graph there are also tabular data indicating the number of bottom-outs recorded (none here), the most frequent value of fork compression and the percentage of fork used (here over 26 mm on a 150 mm fork, i.e. around 18%).\u003c/p\u003e\n\u003ch3 id=\"telemetry-display-on-screen\"\u003etelemetry display on screen\u003c/h3\u003e\n\u003cp\u003eI have also created a python script (\u003ca href=\"https://github.com/giggiox/fork-telemetry/blob/main/videoEdit.ipynb\"\u003eGitHub link to script\u003c/a\u003e) which is based on \u003ca href=\"https://pypi.org/project/Pillow/\"\u003ePillow\u003c/a\u003e and \u003ca href=\"https://pypi.org/project/opencv-python/\"\u003ecv2\u003c/a\u003e.\nThis script allows you to insert the telemetry detected on a video, which for the video I showed earlier, produces an effect similar to this:\u003c/p\u003e\n\r\n \r\n\u003ccenter\u003e\r\n\u003cvideo width=35% controls\u003e\r\n    \u003csource src=\"/projects/forktelemetry/videoTelemetry.mp4\" type=\"video/mp4\" \u003e\r\n    Your browser does not support the video tag.  \r\n\u003c/video\u003e\r\n\u003c/center\u003e\r\n\n\u003cp\u003eThis script first creates 101 images of the rectangle with the percentage written inside (0% to 100%). It then puts these images together in a video where each image represents a value measured by the sensor.\u003c/p\u003e\n\u003ch1 id=\"field-tests\"\u003efield tests\u003c/h1\u003e\n\u003cp\u003eWhen I tested the system on a real enduro descent, I encountered the first difficulties and restrictions of the hardware I used (especially the arduino). In fact, if the shocks are too fast, the pulse count coming from the encoder starts to \u0026lsquo;drift\u0026rsquo; and become increasingly negative.\u003c/p\u003e\n\r\n \r\n\u003ccenter\u003e\r\n\u003cimg src=\"/projects/forktelemetry/testSulCampo.PNG\"  width=\"80%\" \u003e\r\n\u003c/center\u003e\r\n\n\u003cp\u003eThis is because the encoder frequency ranges from 0 to 20KHz.\nThis implies that there is at least a 50 microsecond interval between one rising edge and another.\nAssuming that only the rising edges of signal A are read (thus lowering the accuracy estimate made earlier by a quarter), the arduino still cannot do all the necessary operations in this short time.\nIn fact it should\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003edo a \u003ccode\u003edigitalRead()\u003c/code\u003e on the signal pin B\u003c/li\u003e\n\u003cli\u003ewrite the position on the SD\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eIn the next 2 I try to examine the code and explain why the arduino is not the correct hardware to proceed.\u003c/p\u003e\n\u003ch2 id=\"digitalread\"\u003edigitalRead\u003c/h2\u003e\n\u003cp\u003eFor example let\u0026rsquo;s look at how long a digitalRead() takes using port manipulation.\nWe can for example take this arduino code that does a digitalRead() of encoderPinB and if it is HIGH then it adds 1 to encoderPosition, otherwise it decreases the variable by 1.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-cpp\" data-lang=\"cpp\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003evoid\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ehandleEncoderInterrupt\u003c/span\u003e(){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#75715e\"\u003e// Leggi lo stato corrente del segnale B\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e  PIND \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003e (\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e encoderPinB) \u003cspan style=\"color:#f92672\"\u003e?\u003c/span\u003e encoderPosition \u003cspan style=\"color:#f92672\"\u003e+=\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:\u003c/span\u003e encoderPosition \u003cspan style=\"color:#f92672\"\u003e-=\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eand decompile it \u003ccode\u003eC:\\Users\\luigi\\AppData\\Local\\Temp\\arduino_build_211859\u0026gt;\u0026quot;C:\\Program Files (x86)\\Arduino\\hardware\\tools\\avr\\bin\\avr-objdump.exe\u0026quot; -S codice_test.ino.elf\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003eottenendo\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode class=\"language-assembly\" data-lang=\"assembly\"\u003ea8:   4a 9b           sbis    0x09, 2 ; 9\r\naa:   0c c0           rjmp    .+24            ; 0xc4 \u0026lt;_Z22handleEncoderInterruptv+0x1c\u0026gt;\r\nac:   80 91 04 01     lds     r24, 0x0104     ; 0x800104 \u0026lt;__data_end\u0026gt;\r\nb0:   90 91 05 01     lds     r25, 0x0105     ; 0x800105 \u0026lt;__data_end+0x1\u0026gt;\r\nb4:   a0 91 06 01x     lds     r26, 0x0106     ; 0x800106 \u0026lt;__data_end+0x2\u0026gt;\r\nb8:   b0 91 07 01     lds     r27, 0x0107     ; 0x800107 \u0026lt;__data_end+0x3\u0026gt;\r\nbc:   01 96           adiw    r24, 0x01       ; 1\r\nbe:   a1 1d           adc     r26, r1\r\nc0:   b1 1d           adc     r27, r1\r\nc2:   0b c0           rjmp    .+22            ; 0xda \u0026lt;_Z22handleEncoderInterruptv+0x32\u0026gt;\r\nc4:   80 91 04 01     lds     r24, 0x0104     ; 0x800104 \u0026lt;__data_end\u0026gt;\r\nc8:   90 91 05 01     lds     r25, 0x0105     ; 0x800105 \u0026lt;__data_end+0x1\u0026gt;\r\ncc:   a0 91 06 01     lds     r26, 0x0106     ; 0x800106 \u0026lt;__data_end+0x2\u0026gt;\r\nd0:   b0 91 07 01     lds     r27, 0x0107     ; 0x800107 \u0026lt;__data_end+0x3\u0026gt;\r\nd4:   01 97           sbiw    r24, 0x01       ; 1\r\nd6:   a1 09           sbc     r26, r1\r\nd8:   b1 09           sbc     r27, r1\r\nda:   80 93 04 01     sts     0x0104, r24     ; 0x800104 \u0026lt;__data_end\u0026gt;\r\nde:   90 93 05 01     sts     0x0105, r25     ; 0x800105 \u0026lt;__data_end+0x1\u0026gt;\r\ne2:   a0 93 06 01     sts     0x0106, r26     ; 0x800106 \u0026lt;__data_end+0x2\u0026gt;\r\ne6:   b0 93 07 01     sts     0x0107, r27     ; 0x800107 \u0026lt;__data_end+0x3\u0026gt;\r\nea:   08 95           ret\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eIn particular, the instructions that do the digital readout of encoderPinB are the 2nd to 6th, i.e. the 4 instructions that use \u003ccode\u003elds\u003c/code\u003e (Load direct from SRAM).\nFrom the \u003ca href=\"https://ww1.microchip.com/downloads/en/DeviceDoc/Atmel-7810-Automotive-Microcontrollers-ATmega328P_Datasheet.pdf\"\u003eATmega328 datasheet (page 283)\u003c/a\u003e we can see that these instructions take exactly 2 clock cycles.\u003c/p\u003e\n\r\n \r\n\u003ccenter\u003e\r\n\u003cimg src=\"/projects/forktelemetry/datasheet.PNG\"  width=\"80%\" \u003e\r\n\u003c/center\u003e\r\n\n\u003cp\u003eSo being a 16Mhz microcontroller (1 clock cycle takes 1/16,000,000th of a second, or 62.5 nanoseconds), then those 4 instructions take 8 cycles * 62.5 ns/cycle = 500 ns.\u003c/p\u003e\n\u003cp\u003eFrom this analysis, it can be deduced that digitalRead() is not the bottleneck in the code.\u003c/p\u003e\n\u003ch2 id=\"write-to-sd\"\u003ewrite to SD\u003c/h2\u003e\n\u003cp\u003eInstead, let\u0026rsquo;s look at how long a write to the SD takes. To get a more or less approximate number, we can for example print out the number of milliseconds before and after the position is written to memory.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-cpp\" data-lang=\"cpp\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eSerial.println(millis());\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003elogFile.print(String(encoderPosition)\u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;,\u0026#34;\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eSerial.println(millis());\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eAnd we can see that indeed the bottleneck is in this call, which can take up to 200 milliseconds. Of course, this time also depends on the SD used.\u003c/p\u003e\n\u003ch1 id=\"future-developments\"\u003efuture developments\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003euse a microcontroller with several cores, e.g. an esp32 where one core takes care of reading the encoder signal and another takes care of sampling (which can then be done constantly e.g. 1000 times per second) and writing the encoder position to the SD.\u003c/li\u003e\n\u003cli\u003euse a Bluetooth module to communicate data to an android application, also in real time.\u003c/li\u003e\n\u003cli\u003eadd a GPS module so that you can have in the analysis panel not only the position of the fork metre by metre but also the position of the rider along the descent.\u003c/li\u003e\n\u003cli\u003esensor redesign. The first design I did was top-down (also because it was the first time I had used fusion360 and also the first time I had really created something functional) and with box shapes (not structurally strong) and a lot can be improved. For example, using a linear guide can reduce the complexity of the sensor (and also the weight) but also the degrees of freedom of the system. Below is a possible v2 design using a 6mm linear guide.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\r\n \r\n\u003ccenter\u003e\r\n\u003cimg src=\"/projects/forktelemetry/rev2.PNG\"  width=\"80%\" \u003e\r\n\u003c/center\u003e\r\n\nThe fusion360 file for this version is available on GitHub at \u003ca href=\"https://github.com/giggiox/fork-telemetry/tree/main/fusio360files/v2\"\u003ethis link\u003c/a\u003e .\u003c/p\u003e\n","description":"","image":"/projects/forktelemetry/renders/render.png","permalink":"/en/projects/fork-telemetry/","title":"fork telemetry"},{"content":"\u003ch1 id=\"graphtheory-visualizer\"\u003egraphTheory-Visualizer\u003c/h1\u003e\n\u003cp\u003eThe project was done to visualize the operations that can be done on a graph, such as BFS, DFS, Kruskal, and Dijkstra.\u003c/p\u003e\n\u003cp\u003eThe goal is to have a real time update of the various operations, so that if the graph changes while an \u0026lsquo;operation is being performed on it, the result of the operation also changes.\u003c/p\u003e\n\u003cp\u003eThe project is active on GitHub pages and a demo can be accessed from this link: \u003cmark\u003e\u003ca href=\"https://giggiox.github.io/graphTheory-Visualizer/\"\u003ehttps://giggiox.github.io/graphTheory-Visualizer/\u003c/a\u003e\u003c/mark\u003e \u003cbr/\u003e\u003cbr/\u003e\u003c/p\u003e\n\u003cp\u003eThe GUI looks like this:\n\u003cimg src=\"/projects/graphtheoryvisualizer/interface.gif\" alt=\"\"\u003e\u003c/p\u003e\n\u003cp\u003eand allows:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003ecreate new vertex (on-screen \u003ccode\u003evertex\u003c/code\u003e button)\u003c/li\u003e\n\u003cli\u003ecreate an arc between two vertices (on-screen \u003ccode\u003eedge\u003c/code\u003e button) by clicking first on the first vertex and then on the second\u003c/li\u003e\n\u003cli\u003eremove an arc between two vertices by clicking on it\u003c/li\u003e\n\u003cli\u003eset the graph as weighted and/or directed (switches present on the screen)\u003c/li\u003e\n\u003cli\u003esee the adjacency list as a dropdown. Notice how if the graph changes for example if you remove an arc, the list changes in real time\u003c/li\u003e\n\u003cli\u003evisualize the possible operations on a graph. It is necessary to choose the operation with the dropdown present in the navbar and then start the visualization. Note how even in this case, for example if we choose to display the Dijkstra algorithm and in the process we change the graph by moving the vertices, then the output of the algorithm also changes in real time. The output of an algorithm is displayed on the graph by highlighting vertices and arcs in blue.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"examples\"\u003eexamples\u003c/h2\u003e\n\u003cp\u003edepth-first search (DFS):\n\u003cimg src=\"/projects/graphtheoryvisualizer/dfs.gif\" alt=\"\"\u003e\u003c/p\u003e\n\u003cp\u003edijkstra shortest path between 2 vertices:\n\u003cimg src=\"/projects/graphtheoryvisualizer/dijkstra.gif\" alt=\"\"\u003e\u003c/p\u003e\n\u003cp\u003ekruskal minimum spanning tree:\n\u003cimg src=\"/projects/graphtheoryvisualizer/kruskal.gif\" alt=\"\"\u003e\u003c/p\u003e\n\u003cp\u003eProject done using \u003ca href=\"https://p5js.org/\"\u003ep5js\u003c/a\u003e and \u003ca href=\"https://www.typescriptlang.org/\"\u003eTypeScript\u003c/a\u003e.\u003c/p\u003e\n","description":"","image":"/projects/graphtheoryvisualizer/graph.png","permalink":"/en/projects/graph-theory-visualizer/","title":"graph theory visualizer"}]